buildscript {

    ext {

        kotlin_version = '1.3.21'
        kotlinx_coroutines_version = '1.1.1'

        vertx_version = '3.7.0'

        guice_version = '4.2.2'

        shadow_version = "5.0.0"
        
        libraries = [
                kotlin_jdk8           : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version",
                kotlin_reflect        : "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
                kotlin_coroutines_core: "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version",
                vertx                 : [
                        "io.vertx:vertx-web:$vertx_version",
                        "io.vertx:vertx-lang-kotlin:$vertx_version",
                        "io.vertx:vertx-lang-kotlin-coroutines:$vertx_version",
                        "io.vertx:vertx-auth-jwt:$vertx_version"
                ],
                guice                 : [
                        "com.google.inject:guice:$guice_version"
                ]
        ]
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.0.0"
    }
}

subprojects {
    apply plugin: 'kotlin'

    configurations.all {
        resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        resolutionStrategy.force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            sourceCompatibility = "1.8"
            targetCompatibility = "1.8"
            options.encoding = "UTF-8"
            options.compilerArgs << "-Werror"

            test {
                useJUnitPlatform {}
                failFast = true
                testLogging {
                    events "passed", "skipped", "failed"
                    exceptionFormat "full"
                    showStandardStreams = true
                }
            }
        }
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '1.8'
            freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
            allWarningsAsErrors = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '1.8'
        }
    }
}

